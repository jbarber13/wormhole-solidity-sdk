/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  UpgradeTester,
  UpgradeTesterInterface,
} from "../../../src/testing/UpgradeTester";

const _abi = [
  {
    inputs: [],
    name: "IdempotentUpgrade",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "revertData",
        type: "bytes",
      },
    ],
    name: "UpgradeFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Constructed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "checkedUpgrade",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610555908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600090813560e01c80636fbc15e9146101f1578063aaf10f421461019d5763f4189c471461004157600080fd5b602060031936011261019957803567ffffffffffffffff81116101955761006b903690830161040e565b9133301461015c5760ff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460a01c1661013557506100d07f76e64146a1092c743cd765256e81a0669bd2e5b6c47584ac63b42861d3166043939451928392836104f7565b0390a15b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82541617905580f35b84517fddb5de5e000000000000000000000000000000000000000000000000000000008152fd5b5061018d7f36507a6095075c155c065fd8c16d9ec3a411f1ae1d560d50a19a2b398b88b5b2939451928392836104f7565b0390a16100d4565b8280fd5b5080fd5b82843461019957816003193601126101995760209073ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54169051908152f35b5082346101955780600319360112610195578135918373ffffffffffffffffffffffffffffffffffffffff93848116948582036101955760243567ffffffffffffffff811161040a57610247903690860161040e565b939061025285610493565b9461025f88519687610441565b8086523681830111610195578060209283880137850101527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91825491821687146103e2573b156103ba5791869291867fffffffffffffffffffffffff0000000000000000000000000000000000000000859416179055845161031e8161031060208201947ff4189c47000000000000000000000000000000000000000000000000000000008652602483016104af565b03601f198101835282610441565b519082305af1913d156103b2573d9261033684610493565b9361034383519586610441565b84523d86602086013e5b1561037c575050507fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8280a280f35b6103ae90519283927f0dc0c93f00000000000000000000000000000000000000000000000000000000845283016104af565b0390fd5b60609261034d565b8385517f68155f9a000000000000000000000000000000000000000000000000000000008152fd5b8486517f71d44f30000000000000000000000000000000000000000000000000000000008152fd5b8380fd5b9181601f8401121561043c5782359167ffffffffffffffff831161043c576020838186019501011161043c57565b600080fd5b90601f601f19910116810190811067ffffffffffffffff82111761046457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161046457601f01601f191660200190565b60208082528251818301819052939260005b8581106104e357505050601f19601f8460006040809697860101520116010190565b8181018301518482016040015282016104c1565b90601f83604094601f199360208652816020870152868601376000858286010152011601019056fea2646970667358221220e4c076d59fabc2b3971d7612e65793346198d072b48ea084362afda5a9a1b08b64736f6c63430008180033";

type UpgradeTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UpgradeTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UpgradeTester__factory extends ContractFactory {
  constructor(...args: UpgradeTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UpgradeTester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UpgradeTester__factory {
    return super.connect(runner) as UpgradeTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UpgradeTesterInterface {
    return new Interface(_abi) as UpgradeTesterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UpgradeTester {
    return new Contract(address, _abi, runner) as unknown as UpgradeTester;
  }
}
