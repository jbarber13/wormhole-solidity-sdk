/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  QueryResponseLib,
  QueryResponseLibInterface,
} from "../../../../src/libraries/QueryResponse.sol/QueryResponseLib";

const _abi = [
  {
    inputs: [],
    name: "ChainIdMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidChainId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContractAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidFunctionSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "InvalidPayloadLength",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidResponseVersion",
    type: "error",
  },
  {
    inputs: [],
    name: "NumberOfResponsesMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "RequestTypeMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "StaleBlockNum",
    type: "error",
  },
  {
    inputs: [],
    name: "StaleBlockTime",
    type: "error",
  },
  {
    inputs: [],
    name: "UnexpectedNumberOfResults",
    type: "error",
  },
  {
    inputs: [],
    name: "VerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "VersionMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "received",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "expected",
        type: "uint8",
      },
    ],
    name: "WrongQueryType",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroQueries",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200c2f7f00a764d036915008846d205ab8396d6d5d40047d0696e9d436dedbc92e64736f6c63430008180033";

type QueryResponseLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QueryResponseLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class QueryResponseLib__factory extends ContractFactory {
  constructor(...args: QueryResponseLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      QueryResponseLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): QueryResponseLib__factory {
    return super.connect(runner) as QueryResponseLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QueryResponseLibInterface {
    return new Interface(_abi) as QueryResponseLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): QueryResponseLib {
    return new Contract(address, _abi, runner) as unknown as QueryResponseLib;
  }
}
