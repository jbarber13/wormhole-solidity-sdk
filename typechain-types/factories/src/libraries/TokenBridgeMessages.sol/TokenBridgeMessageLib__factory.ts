/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TokenBridgeMessageLib,
  TokenBridgeMessageLibInterface,
} from "../../../../src/libraries/TokenBridgeMessages.sol/TokenBridgeMessageLib";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "encoded",
        type: "uint8",
      },
    ],
    name: "InvalidPayloadId",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205b67a847beb8346449aa35d8d00c9f0ee30faada6f30c8f677e7506a4617855264736f6c63430008180033";

type TokenBridgeMessageLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenBridgeMessageLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenBridgeMessageLib__factory extends ContractFactory {
  constructor(...args: TokenBridgeMessageLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenBridgeMessageLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TokenBridgeMessageLib__factory {
    return super.connect(runner) as TokenBridgeMessageLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenBridgeMessageLibInterface {
    return new Interface(_abi) as TokenBridgeMessageLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TokenBridgeMessageLib {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TokenBridgeMessageLib;
  }
}
