/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ITokenController,
  ITokenControllerInterface,
} from "../../../../../src/interfaces/cctp/ITokenMinter.sol/ITokenController";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "burnLimitPerMessage",
        type: "uint256",
      },
    ],
    name: "SetBurnLimitPerMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenController",
        type: "address",
      },
    ],
    name: "SetTokenController",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "localToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "remoteDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "remoteToken",
        type: "bytes32",
      },
    ],
    name: "TokenPairLinked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "localToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "remoteDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "remoteToken",
        type: "bytes32",
      },
    ],
    name: "TokenPairUnlinked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "burnLimitsPerMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "localToken",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "remoteDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "remoteToken",
        type: "bytes32",
      },
    ],
    name: "linkTokenPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sourceIdHash",
        type: "bytes32",
      },
    ],
    name: "remoteTokensToLocalTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "localToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "burnLimitPerMessage",
        type: "uint256",
      },
    ],
    name: "setMaxBurnAmountPerMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenController",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "localToken",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "remoteDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "remoteToken",
        type: "bytes32",
      },
    ],
    name: "unlinkTokenPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ITokenController__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenControllerInterface {
    return new Interface(_abi) as ITokenControllerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ITokenController {
    return new Contract(address, _abi, runner) as unknown as ITokenController;
  }
}
