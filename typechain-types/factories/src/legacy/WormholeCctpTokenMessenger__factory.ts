/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  WormholeCctpTokenMessenger,
  WormholeCctpTokenMessengerInterface,
} from "../../../src/legacy/WormholeCctpTokenMessenger";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "CctpVaaMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVaa",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "UnexpectedEmitter",
    type: "error",
  },
] as const;

export class WormholeCctpTokenMessenger__factory {
  static readonly abi = _abi;
  static createInterface(): WormholeCctpTokenMessengerInterface {
    return new Interface(_abi) as WormholeCctpTokenMessengerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WormholeCctpTokenMessenger {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as WormholeCctpTokenMessenger;
  }
}
