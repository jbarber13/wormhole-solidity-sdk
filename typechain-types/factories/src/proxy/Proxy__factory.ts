/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../common";
import type { Proxy, ProxyInterface } from "../../../src/proxy/Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "logic",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "revertData",
        type: "bytes",
      },
    ],
    name: "ProxyConstructionFailed",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x608060409080825261029b80380380916100198285610167565b8339810182828203126101625781516001600160a01b038116908181036101625760208481015190946001600160401b03821161016257019280601f8501121561016257835192610069846101a0565b9161007688519384610167565b848352868587010111610162576100976000959486958880860191016101bb565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319169091179055855163f4189c4760e01b868201908152916100fb9082906100ed90602483016101de565b03601f198101835282610167565b51915af43d15610159573d61010f816101a0565b9061011c85519283610167565b8152600081933d92013e5b156101395750516090908161020b8239f35b9051631dffd9cd60e21b815290819061015590600483016101de565b0390fd5b60609150610127565b600080fd5b601f909101601f19168101906001600160401b0382119082101761018a57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161018a57601f01601f191660200190565b60005b8381106101ce5750506000910152565b81810151838201526020016101be565b604091602082526101fe81518092816020860152602086860191016101bb565b601f01601f191601019056fe608060405273ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e156056573d90f35b3d90fdfea264697066735822122098c91669f280e4fde522b546ffd2caf036055b88c09cf3b6f3abd9a2f9b8c5ee64736f6c63430008180033";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    logic: AddressLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(logic, data, overrides || {});
  }
  override deploy(
    logic: AddressLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(logic, data, overrides || {}) as Promise<
      Proxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Proxy__factory {
    return super.connect(runner) as Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Proxy {
    return new Contract(address, _abi, runner) as unknown as Proxy;
  }
}
