/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DSTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSTest__factory>;
    getContractFactory(
      name: "IMulticall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticall3__factory>;
    getContractFactory(
      name: "StdAssertions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdAssertions__factory>;
    getContractFactory(
      name: "StdError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdError__factory>;
    getContractFactory(
      name: "StdInvariant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdInvariant__factory>;
    getContractFactory(
      name: "StdStorageSafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StdStorageSafe__factory>;
    getContractFactory(
      name: "Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test__factory>;
    getContractFactory(
      name: "Vm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vm__factory>;
    getContractFactory(
      name: "VmSafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VmSafe__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Upgrade__factory>;
    getContractFactory(
      name: "IAttestable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAttestable__factory>;
    getContractFactory(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageTransmitter__factory>;
    getContractFactory(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMessenger__factory>;
    getContractFactory(
      name: "ITokenController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenController__factory>;
    getContractFactory(
      name: "ITokenMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMinter__factory>;
    getContractFactory(
      name: "IOwnable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable2Step__factory>;
    getContractFactory(
      name: "IPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPausable__factory>;
    getContractFactory(
      name: "IDeliveryProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeliveryProvider__factory>;
    getContractFactory(
      name: "IDeliveryProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeliveryProvider__factory>;
    getContractFactory(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenBridge__factory>;
    getContractFactory(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormhole__factory>;
    getContractFactory(
      name: "IWormholeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeReceiver__factory>;
    getContractFactory(
      name: "IWormholeRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayer__factory>;
    getContractFactory(
      name: "IWormholeRelayerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayerBase__factory>;
    getContractFactory(
      name: "IWormholeRelayerDelivery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayerDelivery__factory>;
    getContractFactory(
      name: "IWormholeRelayerSend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormholeRelayerSend__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "WormholeCctpMessageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WormholeCctpMessageLib__factory>;
    getContractFactory(
      name: "WormholeCctpSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WormholeCctpSimulator__factory>;
    getContractFactory(
      name: "WormholeCctpTokenMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WormholeCctpTokenMessenger__factory>;
    getContractFactory(
      name: "BytesParsing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytesParsing__factory>;
    getContractFactory(
      name: "CctpMessageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CctpMessageLib__factory>;
    getContractFactory(
      name: "CoreBridgeLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoreBridgeLib__factory>;
    getContractFactory(
      name: "PercentageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PercentageLib__factory>;
    getContractFactory(
      name: "PermitParsing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermitParsing__factory>;
    getContractFactory(
      name: "QueryResponseLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueryResponseLib__factory>;
    getContractFactory(
      name: "QueryType",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueryType__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "TokenBridgeMessageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBridgeMessageLib__factory>;
    getContractFactory(
      name: "VaaLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaaLib__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyBase__factory>;
    getContractFactory(
      name: "RawDispatcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RawDispatcher__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "QueryRequestBuilder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QueryRequestBuilder__factory>;
    getContractFactory(
      name: "UpgradeTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeTester__factory>;
    getContractFactory(
      name: "IUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDC__factory>;
    getContractFactory(
      name: "MockOffchainRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOffchainRelayer__factory>;
    getContractFactory(
      name: "WormholeRelayerBasicTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WormholeRelayerBasicTest__factory>;
    getContractFactory(
      name: "WormholeRelayerTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WormholeRelayerTest__factory>;
    getContractFactory(
      name: "Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base__factory>;
    getContractFactory(
      name: "CCTPAndTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPAndTokenBase__factory>;
    getContractFactory(
      name: "CCTPAndTokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPAndTokenReceiver__factory>;
    getContractFactory(
      name: "CCTPAndTokenSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPAndTokenSender__factory>;
    getContractFactory(
      name: "CCTPBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPBase__factory>;
    getContractFactory(
      name: "CCTPReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPReceiver__factory>;
    getContractFactory(
      name: "CCTPSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCTPSender__factory>;
    getContractFactory(
      name: "TokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBase__factory>;
    getContractFactory(
      name: "TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceiver__factory>;
    getContractFactory(
      name: "TokenSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenSender__factory>;

    getContractAt(
      name: "DSTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSTest>;
    getContractAt(
      name: "IMulticall3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticall3>;
    getContractAt(
      name: "StdAssertions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StdAssertions>;
    getContractAt(
      name: "StdError",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StdError>;
    getContractAt(
      name: "StdInvariant",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StdInvariant>;
    getContractAt(
      name: "StdStorageSafe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StdStorageSafe>;
    getContractAt(
      name: "Test",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Test>;
    getContractAt(
      name: "Vm",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vm>;
    getContractAt(
      name: "VmSafe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VmSafe>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "Upgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Upgrade>;
    getContractAt(
      name: "IAttestable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAttestable>;
    getContractAt(
      name: "IMessageTransmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageTransmitter>;
    getContractAt(
      name: "ITokenMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMessenger>;
    getContractAt(
      name: "ITokenController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenController>;
    getContractAt(
      name: "ITokenMinter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMinter>;
    getContractAt(
      name: "IOwnable2Step",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable2Step>;
    getContractAt(
      name: "IPausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPausable>;
    getContractAt(
      name: "IDeliveryProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeliveryProvider>;
    getContractAt(
      name: "IDeliveryProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeliveryProvider>;
    getContractAt(
      name: "ITokenBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenBridge>;
    getContractAt(
      name: "IWormhole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormhole>;
    getContractAt(
      name: "IWormholeReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeReceiver>;
    getContractAt(
      name: "IWormholeRelayer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayer>;
    getContractAt(
      name: "IWormholeRelayerBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayerBase>;
    getContractAt(
      name: "IWormholeRelayerDelivery",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayerDelivery>;
    getContractAt(
      name: "IWormholeRelayerSend",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormholeRelayerSend>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "WormholeCctpMessageLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WormholeCctpMessageLib>;
    getContractAt(
      name: "WormholeCctpSimulator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WormholeCctpSimulator>;
    getContractAt(
      name: "WormholeCctpTokenMessenger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WormholeCctpTokenMessenger>;
    getContractAt(
      name: "BytesParsing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BytesParsing>;
    getContractAt(
      name: "CctpMessageLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CctpMessageLib>;
    getContractAt(
      name: "CoreBridgeLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CoreBridgeLib>;
    getContractAt(
      name: "PercentageLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PercentageLib>;
    getContractAt(
      name: "PermitParsing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PermitParsing>;
    getContractAt(
      name: "QueryResponseLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QueryResponseLib>;
    getContractAt(
      name: "QueryType",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QueryType>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "TokenBridgeMessageLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBridgeMessageLib>;
    getContractAt(
      name: "VaaLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaaLib>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyBase>;
    getContractAt(
      name: "RawDispatcher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RawDispatcher>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "QueryRequestBuilder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QueryRequestBuilder>;
    getContractAt(
      name: "UpgradeTester",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeTester>;
    getContractAt(
      name: "IUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDC>;
    getContractAt(
      name: "MockOffchainRelayer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOffchainRelayer>;
    getContractAt(
      name: "WormholeRelayerBasicTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WormholeRelayerBasicTest>;
    getContractAt(
      name: "WormholeRelayerTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WormholeRelayerTest>;
    getContractAt(
      name: "Base",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Base>;
    getContractAt(
      name: "CCTPAndTokenBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPAndTokenBase>;
    getContractAt(
      name: "CCTPAndTokenReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPAndTokenReceiver>;
    getContractAt(
      name: "CCTPAndTokenSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPAndTokenSender>;
    getContractAt(
      name: "CCTPBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPBase>;
    getContractAt(
      name: "CCTPReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPReceiver>;
    getContractAt(
      name: "CCTPSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CCTPSender>;
    getContractAt(
      name: "TokenBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBase>;
    getContractAt(
      name: "TokenReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceiver>;
    getContractAt(
      name: "TokenSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenSender>;

    deployContract(
      name: "DSTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSTest>;
    deployContract(
      name: "IMulticall3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMulticall3>;
    deployContract(
      name: "StdAssertions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdAssertions>;
    deployContract(
      name: "StdError",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdError>;
    deployContract(
      name: "StdInvariant",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdInvariant>;
    deployContract(
      name: "StdStorageSafe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdStorageSafe>;
    deployContract(
      name: "Test",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Test>;
    deployContract(
      name: "Vm",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vm>;
    deployContract(
      name: "VmSafe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VmSafe>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "Upgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Upgrade>;
    deployContract(
      name: "IAttestable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAttestable>;
    deployContract(
      name: "IMessageTransmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMessenger>;
    deployContract(
      name: "ITokenController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenController>;
    deployContract(
      name: "ITokenMinter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMinter>;
    deployContract(
      name: "IOwnable2Step",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable2Step>;
    deployContract(
      name: "IPausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPausable>;
    deployContract(
      name: "IDeliveryProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeliveryProvider>;
    deployContract(
      name: "IDeliveryProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeliveryProvider>;
    deployContract(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenBridge>;
    deployContract(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormhole>;
    deployContract(
      name: "IWormholeReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeReceiver>;
    deployContract(
      name: "IWormholeRelayer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayer>;
    deployContract(
      name: "IWormholeRelayerBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerBase>;
    deployContract(
      name: "IWormholeRelayerDelivery",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerDelivery>;
    deployContract(
      name: "IWormholeRelayerSend",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerSend>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "WormholeCctpMessageLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeCctpMessageLib>;
    deployContract(
      name: "WormholeCctpSimulator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeCctpSimulator>;
    deployContract(
      name: "WormholeCctpTokenMessenger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeCctpTokenMessenger>;
    deployContract(
      name: "BytesParsing",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesParsing>;
    deployContract(
      name: "CctpMessageLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CctpMessageLib>;
    deployContract(
      name: "CoreBridgeLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoreBridgeLib>;
    deployContract(
      name: "PercentageLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PercentageLib>;
    deployContract(
      name: "PermitParsing",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermitParsing>;
    deployContract(
      name: "QueryResponseLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QueryResponseLib>;
    deployContract(
      name: "QueryType",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QueryType>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "TokenBridgeMessageLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenBridgeMessageLib>;
    deployContract(
      name: "VaaLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaaLib>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ProxyBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyBase>;
    deployContract(
      name: "RawDispatcher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RawDispatcher>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "QueryRequestBuilder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QueryRequestBuilder>;
    deployContract(
      name: "UpgradeTester",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeTester>;
    deployContract(
      name: "IUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDC>;
    deployContract(
      name: "MockOffchainRelayer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOffchainRelayer>;
    deployContract(
      name: "WormholeRelayerBasicTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeRelayerBasicTest>;
    deployContract(
      name: "WormholeRelayerTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeRelayerTest>;
    deployContract(
      name: "Base",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Base>;
    deployContract(
      name: "CCTPAndTokenBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPAndTokenBase>;
    deployContract(
      name: "CCTPAndTokenReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPAndTokenReceiver>;
    deployContract(
      name: "CCTPAndTokenSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPAndTokenSender>;
    deployContract(
      name: "CCTPBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPBase>;
    deployContract(
      name: "CCTPReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPReceiver>;
    deployContract(
      name: "CCTPSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPSender>;
    deployContract(
      name: "TokenBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenBase>;
    deployContract(
      name: "TokenReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceiver>;
    deployContract(
      name: "TokenSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenSender>;

    deployContract(
      name: "DSTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSTest>;
    deployContract(
      name: "IMulticall3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMulticall3>;
    deployContract(
      name: "StdAssertions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdAssertions>;
    deployContract(
      name: "StdError",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdError>;
    deployContract(
      name: "StdInvariant",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdInvariant>;
    deployContract(
      name: "StdStorageSafe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StdStorageSafe>;
    deployContract(
      name: "Test",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Test>;
    deployContract(
      name: "Vm",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vm>;
    deployContract(
      name: "VmSafe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VmSafe>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "Upgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Upgrade>;
    deployContract(
      name: "IAttestable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAttestable>;
    deployContract(
      name: "IMessageTransmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageTransmitter>;
    deployContract(
      name: "ITokenMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMessenger>;
    deployContract(
      name: "ITokenController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenController>;
    deployContract(
      name: "ITokenMinter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenMinter>;
    deployContract(
      name: "IOwnable2Step",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable2Step>;
    deployContract(
      name: "IPausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPausable>;
    deployContract(
      name: "IDeliveryProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeliveryProvider>;
    deployContract(
      name: "IDeliveryProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeliveryProvider>;
    deployContract(
      name: "ITokenBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenBridge>;
    deployContract(
      name: "IWormhole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormhole>;
    deployContract(
      name: "IWormholeReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeReceiver>;
    deployContract(
      name: "IWormholeRelayer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayer>;
    deployContract(
      name: "IWormholeRelayerBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerBase>;
    deployContract(
      name: "IWormholeRelayerDelivery",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerDelivery>;
    deployContract(
      name: "IWormholeRelayerSend",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWormholeRelayerSend>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "WormholeCctpMessageLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeCctpMessageLib>;
    deployContract(
      name: "WormholeCctpSimulator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeCctpSimulator>;
    deployContract(
      name: "WormholeCctpTokenMessenger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeCctpTokenMessenger>;
    deployContract(
      name: "BytesParsing",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesParsing>;
    deployContract(
      name: "CctpMessageLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CctpMessageLib>;
    deployContract(
      name: "CoreBridgeLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoreBridgeLib>;
    deployContract(
      name: "PercentageLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PercentageLib>;
    deployContract(
      name: "PermitParsing",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermitParsing>;
    deployContract(
      name: "QueryResponseLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QueryResponseLib>;
    deployContract(
      name: "QueryType",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QueryType>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "TokenBridgeMessageLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenBridgeMessageLib>;
    deployContract(
      name: "VaaLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaaLib>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ProxyBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProxyBase>;
    deployContract(
      name: "RawDispatcher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RawDispatcher>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "QueryRequestBuilder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QueryRequestBuilder>;
    deployContract(
      name: "UpgradeTester",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeTester>;
    deployContract(
      name: "IUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDC>;
    deployContract(
      name: "MockOffchainRelayer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOffchainRelayer>;
    deployContract(
      name: "WormholeRelayerBasicTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeRelayerBasicTest>;
    deployContract(
      name: "WormholeRelayerTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WormholeRelayerTest>;
    deployContract(
      name: "Base",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Base>;
    deployContract(
      name: "CCTPAndTokenBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPAndTokenBase>;
    deployContract(
      name: "CCTPAndTokenReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPAndTokenReceiver>;
    deployContract(
      name: "CCTPAndTokenSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPAndTokenSender>;
    deployContract(
      name: "CCTPBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPBase>;
    deployContract(
      name: "CCTPReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPReceiver>;
    deployContract(
      name: "CCTPSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CCTPSender>;
    deployContract(
      name: "TokenBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenBase>;
    deployContract(
      name: "TokenReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceiver>;
    deployContract(
      name: "TokenSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenSender>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
