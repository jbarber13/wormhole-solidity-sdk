/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ITokenControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "burnLimitsPerMessage"
      | "linkTokenPair"
      | "remoteTokensToLocalTokens"
      | "setMaxBurnAmountPerMessage"
      | "tokenController"
      | "unlinkTokenPair"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetBurnLimitPerMessage"
      | "SetTokenController"
      | "TokenPairLinked"
      | "TokenPairUnlinked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "burnLimitsPerMessage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkTokenPair",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteTokensToLocalTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBurnAmountPerMessage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkTokenPair",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnLimitsPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteTokensToLocalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBurnAmountPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkTokenPair",
    data: BytesLike
  ): Result;
}

export namespace SetBurnLimitPerMessageEvent {
  export type InputTuple = [
    token: AddressLike,
    burnLimitPerMessage: BigNumberish
  ];
  export type OutputTuple = [token: string, burnLimitPerMessage: bigint];
  export interface OutputObject {
    token: string;
    burnLimitPerMessage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenControllerEvent {
  export type InputTuple = [tokenController: AddressLike];
  export type OutputTuple = [tokenController: string];
  export interface OutputObject {
    tokenController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPairLinkedEvent {
  export type InputTuple = [
    localToken: AddressLike,
    remoteDomain: BigNumberish,
    remoteToken: BytesLike
  ];
  export type OutputTuple = [
    localToken: string,
    remoteDomain: bigint,
    remoteToken: string
  ];
  export interface OutputObject {
    localToken: string;
    remoteDomain: bigint;
    remoteToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPairUnlinkedEvent {
  export type InputTuple = [
    localToken: AddressLike,
    remoteDomain: BigNumberish,
    remoteToken: BytesLike
  ];
  export type OutputTuple = [
    localToken: string,
    remoteDomain: bigint,
    remoteToken: string
  ];
  export interface OutputObject {
    localToken: string;
    remoteDomain: bigint;
    remoteToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITokenController extends BaseContract {
  connect(runner?: ContractRunner | null): ITokenController;
  waitForDeployment(): Promise<this>;

  interface: ITokenControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  burnLimitsPerMessage: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  linkTokenPair: TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  remoteTokensToLocalTokens: TypedContractMethod<
    [sourceIdHash: BytesLike],
    [string],
    "view"
  >;

  setMaxBurnAmountPerMessage: TypedContractMethod<
    [localToken: AddressLike, burnLimitPerMessage: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenController: TypedContractMethod<[], [string], "view">;

  unlinkTokenPair: TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "burnLimitsPerMessage"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "linkTokenPair"
  ): TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remoteTokensToLocalTokens"
  ): TypedContractMethod<[sourceIdHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setMaxBurnAmountPerMessage"
  ): TypedContractMethod<
    [localToken: AddressLike, burnLimitPerMessage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlinkTokenPair"
  ): TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SetBurnLimitPerMessage"
  ): TypedContractEvent<
    SetBurnLimitPerMessageEvent.InputTuple,
    SetBurnLimitPerMessageEvent.OutputTuple,
    SetBurnLimitPerMessageEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenController"
  ): TypedContractEvent<
    SetTokenControllerEvent.InputTuple,
    SetTokenControllerEvent.OutputTuple,
    SetTokenControllerEvent.OutputObject
  >;
  getEvent(
    key: "TokenPairLinked"
  ): TypedContractEvent<
    TokenPairLinkedEvent.InputTuple,
    TokenPairLinkedEvent.OutputTuple,
    TokenPairLinkedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPairUnlinked"
  ): TypedContractEvent<
    TokenPairUnlinkedEvent.InputTuple,
    TokenPairUnlinkedEvent.OutputTuple,
    TokenPairUnlinkedEvent.OutputObject
  >;

  filters: {
    "SetBurnLimitPerMessage(address,uint256)": TypedContractEvent<
      SetBurnLimitPerMessageEvent.InputTuple,
      SetBurnLimitPerMessageEvent.OutputTuple,
      SetBurnLimitPerMessageEvent.OutputObject
    >;
    SetBurnLimitPerMessage: TypedContractEvent<
      SetBurnLimitPerMessageEvent.InputTuple,
      SetBurnLimitPerMessageEvent.OutputTuple,
      SetBurnLimitPerMessageEvent.OutputObject
    >;

    "SetTokenController(address)": TypedContractEvent<
      SetTokenControllerEvent.InputTuple,
      SetTokenControllerEvent.OutputTuple,
      SetTokenControllerEvent.OutputObject
    >;
    SetTokenController: TypedContractEvent<
      SetTokenControllerEvent.InputTuple,
      SetTokenControllerEvent.OutputTuple,
      SetTokenControllerEvent.OutputObject
    >;

    "TokenPairLinked(address,uint32,bytes32)": TypedContractEvent<
      TokenPairLinkedEvent.InputTuple,
      TokenPairLinkedEvent.OutputTuple,
      TokenPairLinkedEvent.OutputObject
    >;
    TokenPairLinked: TypedContractEvent<
      TokenPairLinkedEvent.InputTuple,
      TokenPairLinkedEvent.OutputTuple,
      TokenPairLinkedEvent.OutputObject
    >;

    "TokenPairUnlinked(address,uint32,bytes32)": TypedContractEvent<
      TokenPairUnlinkedEvent.InputTuple,
      TokenPairUnlinkedEvent.OutputTuple,
      TokenPairUnlinkedEvent.OutputObject
    >;
    TokenPairUnlinked: TypedContractEvent<
      TokenPairUnlinkedEvent.InputTuple,
      TokenPairUnlinkedEvent.OutputTuple,
      TokenPairUnlinkedEvent.OutputObject
    >;
  };
}
