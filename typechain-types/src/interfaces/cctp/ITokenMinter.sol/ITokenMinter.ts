/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ITokenMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addLocalTokenMessenger"
      | "burn"
      | "burnLimitsPerMessage"
      | "getLocalToken"
      | "linkTokenPair"
      | "localTokenMessenger"
      | "mint"
      | "owner"
      | "pause"
      | "paused"
      | "pauser"
      | "pendingOwner"
      | "remoteTokensToLocalTokens"
      | "removeLocalTokenMessenger"
      | "setMaxBurnAmountPerMessage"
      | "setTokenController"
      | "tokenController"
      | "transferOwnership"
      | "unlinkTokenPair"
      | "unpause"
      | "updatePauser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LocalTokenMessengerAdded"
      | "LocalTokenMessengerRemoved"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Pause"
      | "PauserChanged"
      | "SetBurnLimitPerMessage"
      | "SetTokenController"
      | "TokenPairLinked"
      | "TokenPairUnlinked"
      | "Unpause"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLocalTokenMessenger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLimitsPerMessage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalToken",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkTokenPair",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "localTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remoteTokensToLocalTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLocalTokenMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBurnAmountPerMessage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkTokenPair",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePauser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnLimitsPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteTokensToLocalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLocalTokenMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBurnAmountPerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePauser",
    data: BytesLike
  ): Result;
}

export namespace LocalTokenMessengerAddedEvent {
  export type InputTuple = [localTokenMessenger: AddressLike];
  export type OutputTuple = [localTokenMessenger: string];
  export interface OutputObject {
    localTokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LocalTokenMessengerRemovedEvent {
  export type InputTuple = [localTokenMessenger: AddressLike];
  export type OutputTuple = [localTokenMessenger: string];
  export interface OutputObject {
    localTokenMessenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserChangedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBurnLimitPerMessageEvent {
  export type InputTuple = [
    token: AddressLike,
    burnLimitPerMessage: BigNumberish
  ];
  export type OutputTuple = [token: string, burnLimitPerMessage: bigint];
  export interface OutputObject {
    token: string;
    burnLimitPerMessage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenControllerEvent {
  export type InputTuple = [tokenController: AddressLike];
  export type OutputTuple = [tokenController: string];
  export interface OutputObject {
    tokenController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPairLinkedEvent {
  export type InputTuple = [
    localToken: AddressLike,
    remoteDomain: BigNumberish,
    remoteToken: BytesLike
  ];
  export type OutputTuple = [
    localToken: string,
    remoteDomain: bigint,
    remoteToken: string
  ];
  export interface OutputObject {
    localToken: string;
    remoteDomain: bigint;
    remoteToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPairUnlinkedEvent {
  export type InputTuple = [
    localToken: AddressLike,
    remoteDomain: BigNumberish,
    remoteToken: BytesLike
  ];
  export type OutputTuple = [
    localToken: string,
    remoteDomain: bigint,
    remoteToken: string
  ];
  export interface OutputObject {
    localToken: string;
    remoteDomain: bigint;
    remoteToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITokenMinter extends BaseContract {
  connect(runner?: ContractRunner | null): ITokenMinter;
  waitForDeployment(): Promise<this>;

  interface: ITokenMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addLocalTokenMessenger: TypedContractMethod<
    [newLocalTokenMessenger: AddressLike],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<
    [burnToken: AddressLike, burnAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnLimitsPerMessage: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getLocalToken: TypedContractMethod<
    [remoteDomain: BigNumberish, remoteToken: BytesLike],
    [string],
    "view"
  >;

  linkTokenPair: TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  localTokenMessenger: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<
    [
      sourceDomain: BigNumberish,
      burnToken: BytesLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pauser: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  remoteTokensToLocalTokens: TypedContractMethod<
    [sourceIdHash: BytesLike],
    [string],
    "view"
  >;

  removeLocalTokenMessenger: TypedContractMethod<[], [void], "nonpayable">;

  setMaxBurnAmountPerMessage: TypedContractMethod<
    [localToken: AddressLike, burnLimitPerMessage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenController: TypedContractMethod<
    [newTokenController: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenController: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlinkTokenPair: TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePauser: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addLocalTokenMessenger"
  ): TypedContractMethod<
    [newLocalTokenMessenger: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [burnToken: AddressLike, burnAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnLimitsPerMessage"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLocalToken"
  ): TypedContractMethod<
    [remoteDomain: BigNumberish, remoteToken: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "linkTokenPair"
  ): TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "localTokenMessenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      sourceDomain: BigNumberish,
      burnToken: BytesLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remoteTokensToLocalTokens"
  ): TypedContractMethod<[sourceIdHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "removeLocalTokenMessenger"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxBurnAmountPerMessage"
  ): TypedContractMethod<
    [localToken: AddressLike, burnLimitPerMessage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenController"
  ): TypedContractMethod<
    [newTokenController: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlinkTokenPair"
  ): TypedContractMethod<
    [
      localToken: AddressLike,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePauser"
  ): TypedContractMethod<[newPauser: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LocalTokenMessengerAdded"
  ): TypedContractEvent<
    LocalTokenMessengerAddedEvent.InputTuple,
    LocalTokenMessengerAddedEvent.OutputTuple,
    LocalTokenMessengerAddedEvent.OutputObject
  >;
  getEvent(
    key: "LocalTokenMessengerRemoved"
  ): TypedContractEvent<
    LocalTokenMessengerRemovedEvent.InputTuple,
    LocalTokenMessengerRemovedEvent.OutputTuple,
    LocalTokenMessengerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "PauserChanged"
  ): TypedContractEvent<
    PauserChangedEvent.InputTuple,
    PauserChangedEvent.OutputTuple,
    PauserChangedEvent.OutputObject
  >;
  getEvent(
    key: "SetBurnLimitPerMessage"
  ): TypedContractEvent<
    SetBurnLimitPerMessageEvent.InputTuple,
    SetBurnLimitPerMessageEvent.OutputTuple,
    SetBurnLimitPerMessageEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenController"
  ): TypedContractEvent<
    SetTokenControllerEvent.InputTuple,
    SetTokenControllerEvent.OutputTuple,
    SetTokenControllerEvent.OutputObject
  >;
  getEvent(
    key: "TokenPairLinked"
  ): TypedContractEvent<
    TokenPairLinkedEvent.InputTuple,
    TokenPairLinkedEvent.OutputTuple,
    TokenPairLinkedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPairUnlinked"
  ): TypedContractEvent<
    TokenPairUnlinkedEvent.InputTuple,
    TokenPairUnlinkedEvent.OutputTuple,
    TokenPairUnlinkedEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;

  filters: {
    "LocalTokenMessengerAdded(address)": TypedContractEvent<
      LocalTokenMessengerAddedEvent.InputTuple,
      LocalTokenMessengerAddedEvent.OutputTuple,
      LocalTokenMessengerAddedEvent.OutputObject
    >;
    LocalTokenMessengerAdded: TypedContractEvent<
      LocalTokenMessengerAddedEvent.InputTuple,
      LocalTokenMessengerAddedEvent.OutputTuple,
      LocalTokenMessengerAddedEvent.OutputObject
    >;

    "LocalTokenMessengerRemoved(address)": TypedContractEvent<
      LocalTokenMessengerRemovedEvent.InputTuple,
      LocalTokenMessengerRemovedEvent.OutputTuple,
      LocalTokenMessengerRemovedEvent.OutputObject
    >;
    LocalTokenMessengerRemoved: TypedContractEvent<
      LocalTokenMessengerRemovedEvent.InputTuple,
      LocalTokenMessengerRemovedEvent.OutputTuple,
      LocalTokenMessengerRemovedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "PauserChanged(address)": TypedContractEvent<
      PauserChangedEvent.InputTuple,
      PauserChangedEvent.OutputTuple,
      PauserChangedEvent.OutputObject
    >;
    PauserChanged: TypedContractEvent<
      PauserChangedEvent.InputTuple,
      PauserChangedEvent.OutputTuple,
      PauserChangedEvent.OutputObject
    >;

    "SetBurnLimitPerMessage(address,uint256)": TypedContractEvent<
      SetBurnLimitPerMessageEvent.InputTuple,
      SetBurnLimitPerMessageEvent.OutputTuple,
      SetBurnLimitPerMessageEvent.OutputObject
    >;
    SetBurnLimitPerMessage: TypedContractEvent<
      SetBurnLimitPerMessageEvent.InputTuple,
      SetBurnLimitPerMessageEvent.OutputTuple,
      SetBurnLimitPerMessageEvent.OutputObject
    >;

    "SetTokenController(address)": TypedContractEvent<
      SetTokenControllerEvent.InputTuple,
      SetTokenControllerEvent.OutputTuple,
      SetTokenControllerEvent.OutputObject
    >;
    SetTokenController: TypedContractEvent<
      SetTokenControllerEvent.InputTuple,
      SetTokenControllerEvent.OutputTuple,
      SetTokenControllerEvent.OutputObject
    >;

    "TokenPairLinked(address,uint32,bytes32)": TypedContractEvent<
      TokenPairLinkedEvent.InputTuple,
      TokenPairLinkedEvent.OutputTuple,
      TokenPairLinkedEvent.OutputObject
    >;
    TokenPairLinked: TypedContractEvent<
      TokenPairLinkedEvent.InputTuple,
      TokenPairLinkedEvent.OutputTuple,
      TokenPairLinkedEvent.OutputObject
    >;

    "TokenPairUnlinked(address,uint32,bytes32)": TypedContractEvent<
      TokenPairUnlinkedEvent.InputTuple,
      TokenPairUnlinkedEvent.OutputTuple,
      TokenPairUnlinkedEvent.OutputObject
    >;
    TokenPairUnlinked: TypedContractEvent<
      TokenPairUnlinkedEvent.InputTuple,
      TokenPairUnlinkedEvent.OutputTuple,
      TokenPairUnlinkedEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
  };
}
