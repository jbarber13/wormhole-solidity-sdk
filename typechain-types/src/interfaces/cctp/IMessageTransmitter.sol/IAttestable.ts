/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IAttestableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attesterManager"
      | "disableAttester"
      | "enableAttester"
      | "getEnabledAttester"
      | "getNumEnabledAttesters"
      | "isEnabledAttester"
      | "setSignatureThreshold"
      | "updateAttesterManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttesterDisabled"
      | "AttesterEnabled"
      | "AttesterManagerUpdated"
      | "SignatureThresholdUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attesterManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledAttester",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumEnabledAttesters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabledAttester",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttesterManager",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "attesterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumEnabledAttesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEnabledAttester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttesterManager",
    data: BytesLike
  ): Result;
}

export namespace AttesterDisabledEvent {
  export type InputTuple = [attester: AddressLike];
  export type OutputTuple = [attester: string];
  export interface OutputObject {
    attester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttesterEnabledEvent {
  export type InputTuple = [attester: AddressLike];
  export type OutputTuple = [attester: string];
  export interface OutputObject {
    attester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttesterManagerUpdatedEvent {
  export type InputTuple = [
    previousAttesterManager: AddressLike,
    newAttesterManager: AddressLike
  ];
  export type OutputTuple = [
    previousAttesterManager: string,
    newAttesterManager: string
  ];
  export interface OutputObject {
    previousAttesterManager: string;
    newAttesterManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureThresholdUpdatedEvent {
  export type InputTuple = [
    oldSignatureThreshold: BigNumberish,
    newSignatureThreshold: BigNumberish
  ];
  export type OutputTuple = [
    oldSignatureThreshold: bigint,
    newSignatureThreshold: bigint
  ];
  export interface OutputObject {
    oldSignatureThreshold: bigint;
    newSignatureThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAttestable extends BaseContract {
  connect(runner?: ContractRunner | null): IAttestable;
  waitForDeployment(): Promise<this>;

  interface: IAttestableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attesterManager: TypedContractMethod<[], [string], "view">;

  disableAttester: TypedContractMethod<
    [attester: AddressLike],
    [void],
    "nonpayable"
  >;

  enableAttester: TypedContractMethod<
    [attester: AddressLike],
    [void],
    "nonpayable"
  >;

  getEnabledAttester: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getNumEnabledAttesters: TypedContractMethod<[], [bigint], "view">;

  isEnabledAttester: TypedContractMethod<
    [attester: AddressLike],
    [boolean],
    "view"
  >;

  setSignatureThreshold: TypedContractMethod<
    [newSignatureThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAttesterManager: TypedContractMethod<
    [newAttesterManager: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attesterManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disableAttester"
  ): TypedContractMethod<[attester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableAttester"
  ): TypedContractMethod<[attester: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEnabledAttester"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getNumEnabledAttesters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEnabledAttester"
  ): TypedContractMethod<[attester: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setSignatureThreshold"
  ): TypedContractMethod<
    [newSignatureThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAttesterManager"
  ): TypedContractMethod<
    [newAttesterManager: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AttesterDisabled"
  ): TypedContractEvent<
    AttesterDisabledEvent.InputTuple,
    AttesterDisabledEvent.OutputTuple,
    AttesterDisabledEvent.OutputObject
  >;
  getEvent(
    key: "AttesterEnabled"
  ): TypedContractEvent<
    AttesterEnabledEvent.InputTuple,
    AttesterEnabledEvent.OutputTuple,
    AttesterEnabledEvent.OutputObject
  >;
  getEvent(
    key: "AttesterManagerUpdated"
  ): TypedContractEvent<
    AttesterManagerUpdatedEvent.InputTuple,
    AttesterManagerUpdatedEvent.OutputTuple,
    AttesterManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SignatureThresholdUpdated"
  ): TypedContractEvent<
    SignatureThresholdUpdatedEvent.InputTuple,
    SignatureThresholdUpdatedEvent.OutputTuple,
    SignatureThresholdUpdatedEvent.OutputObject
  >;

  filters: {
    "AttesterDisabled(address)": TypedContractEvent<
      AttesterDisabledEvent.InputTuple,
      AttesterDisabledEvent.OutputTuple,
      AttesterDisabledEvent.OutputObject
    >;
    AttesterDisabled: TypedContractEvent<
      AttesterDisabledEvent.InputTuple,
      AttesterDisabledEvent.OutputTuple,
      AttesterDisabledEvent.OutputObject
    >;

    "AttesterEnabled(address)": TypedContractEvent<
      AttesterEnabledEvent.InputTuple,
      AttesterEnabledEvent.OutputTuple,
      AttesterEnabledEvent.OutputObject
    >;
    AttesterEnabled: TypedContractEvent<
      AttesterEnabledEvent.InputTuple,
      AttesterEnabledEvent.OutputTuple,
      AttesterEnabledEvent.OutputObject
    >;

    "AttesterManagerUpdated(address,address)": TypedContractEvent<
      AttesterManagerUpdatedEvent.InputTuple,
      AttesterManagerUpdatedEvent.OutputTuple,
      AttesterManagerUpdatedEvent.OutputObject
    >;
    AttesterManagerUpdated: TypedContractEvent<
      AttesterManagerUpdatedEvent.InputTuple,
      AttesterManagerUpdatedEvent.OutputTuple,
      AttesterManagerUpdatedEvent.OutputObject
    >;

    "SignatureThresholdUpdated(uint256,uint256)": TypedContractEvent<
      SignatureThresholdUpdatedEvent.InputTuple,
      SignatureThresholdUpdatedEvent.OutputTuple,
      SignatureThresholdUpdatedEvent.OutputObject
    >;
    SignatureThresholdUpdated: TypedContractEvent<
      SignatureThresholdUpdatedEvent.InputTuple,
      SignatureThresholdUpdatedEvent.OutputTuple,
      SignatureThresholdUpdatedEvent.OutputObject
    >;
  };
}
