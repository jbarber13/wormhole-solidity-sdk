/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDeliveryProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getRewardAddress"
      | "getSupportedKeys"
      | "getTargetChainAddress"
      | "isChainSupported"
      | "isMessageKeyTypeSupported"
      | "quoteAssetConversion"
      | "quoteDeliveryPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRewardAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetChainAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isChainSupported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageKeyTypeSupported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAssetConversion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetChainAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageKeyTypeSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteAssetConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
}

export interface IDeliveryProvider extends BaseContract {
  connect(runner?: ContractRunner | null): IDeliveryProvider;
  waitForDeployment(): Promise<this>;

  interface: IDeliveryProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRewardAddress: TypedContractMethod<[], [string], "view">;

  getSupportedKeys: TypedContractMethod<[], [bigint], "view">;

  getTargetChainAddress: TypedContractMethod<
    [targetChain: BigNumberish],
    [string],
    "view"
  >;

  isChainSupported: TypedContractMethod<
    [targetChain: BigNumberish],
    [boolean],
    "view"
  >;

  isMessageKeyTypeSupported: TypedContractMethod<
    [keyType: BigNumberish],
    [boolean],
    "view"
  >;

  quoteAssetConversion: TypedContractMethod<
    [targetChain: BigNumberish, currentChainAmount: BigNumberish],
    [bigint],
    "view"
  >;

  quoteDeliveryPrice: TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParams: BytesLike
    ],
    [
      [bigint, string] & {
        nativePriceQuote: bigint;
        encodedExecutionInfo: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRewardAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSupportedKeys"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTargetChainAddress"
  ): TypedContractMethod<[targetChain: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isChainSupported"
  ): TypedContractMethod<[targetChain: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMessageKeyTypeSupported"
  ): TypedContractMethod<[keyType: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "quoteAssetConversion"
  ): TypedContractMethod<
    [targetChain: BigNumberish, currentChainAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParams: BytesLike
    ],
    [
      [bigint, string] & {
        nativePriceQuote: bigint;
        encodedExecutionInfo: string;
      }
    ],
    "view"
  >;

  filters: {};
}
