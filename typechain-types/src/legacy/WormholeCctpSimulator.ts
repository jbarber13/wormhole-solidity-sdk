/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WormholeCctpSimulatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "craftCctpTokenBurnMessage"
      | "craftWormholeCctpRedeemParams"
      | "setDestinationCaller"
      | "setForeignCaller"
      | "setForeignSender"
      | "setMintRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "craftCctpTokenBurnMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "craftWormholeCctpRedeemParams",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setForeignCaller",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setForeignSender",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintRecipient",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "craftCctpTokenBurnMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftWormholeCctpRedeemParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForeignCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForeignSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintRecipient",
    data: BytesLike
  ): Result;
}

export interface WormholeCctpSimulator extends BaseContract {
  connect(runner?: ContractRunner | null): WormholeCctpSimulator;
  waitForDeployment(): Promise<this>;

  interface: WormholeCctpSimulatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  craftCctpTokenBurnMessage: TypedContractMethod<
    [amount: BigNumberish],
    [
      [string, string] & { encodedCctpMessage: string; cctpAttestation: string }
    ],
    "nonpayable"
  >;

  craftWormholeCctpRedeemParams: TypedContractMethod<
    [amount: BigNumberish, payload: BytesLike],
    [
      [string, string, string] & {
        encodedVaa: string;
        encodedCctpMessage: string;
        cctpAttestation: string;
      }
    ],
    "nonpayable"
  >;

  setDestinationCaller: TypedContractMethod<
    [destinationCaller_: AddressLike],
    [void],
    "nonpayable"
  >;

  setForeignCaller: TypedContractMethod<
    [foreignCaller_: BytesLike],
    [void],
    "nonpayable"
  >;

  setForeignSender: TypedContractMethod<
    [foreignSender_: BytesLike],
    [void],
    "nonpayable"
  >;

  setMintRecipient: TypedContractMethod<
    [mintRecipient_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "craftCctpTokenBurnMessage"
  ): TypedContractMethod<
    [amount: BigNumberish],
    [
      [string, string] & { encodedCctpMessage: string; cctpAttestation: string }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "craftWormholeCctpRedeemParams"
  ): TypedContractMethod<
    [amount: BigNumberish, payload: BytesLike],
    [
      [string, string, string] & {
        encodedVaa: string;
        encodedCctpMessage: string;
        cctpAttestation: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDestinationCaller"
  ): TypedContractMethod<
    [destinationCaller_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setForeignCaller"
  ): TypedContractMethod<[foreignCaller_: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForeignSender"
  ): TypedContractMethod<[foreignSender_: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMintRecipient"
  ): TypedContractMethod<[mintRecipient_: AddressLike], [void], "nonpayable">;

  filters: {};
}
