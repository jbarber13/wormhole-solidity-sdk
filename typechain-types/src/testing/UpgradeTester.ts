/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UpgradeTesterInterface extends Interface {
  getFunction(
    nameOrSignature: "checkedUpgrade" | "getImplementation" | "upgradeTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Constructed"
      | "Upgraded(address)"
      | "Upgraded(bytes)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkedUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkedUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
}

export namespace ConstructedEvent {
  export type InputTuple = [data: BytesLike];
  export type OutputTuple = [data: string];
  export interface OutputObject {
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Upgraded_address_Event {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Upgraded_bytes_Event {
  export type InputTuple = [data: BytesLike];
  export type OutputTuple = [data: string];
  export interface OutputObject {
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UpgradeTester extends BaseContract {
  connect(runner?: ContractRunner | null): UpgradeTester;
  waitForDeployment(): Promise<this>;

  interface: UpgradeTesterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkedUpgrade: TypedContractMethod<[data: BytesLike], [void], "payable">;

  getImplementation: TypedContractMethod<[], [string], "view">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkedUpgrade"
  ): TypedContractMethod<[data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "getImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Constructed"
  ): TypedContractEvent<
    ConstructedEvent.InputTuple,
    ConstructedEvent.OutputTuple,
    ConstructedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded(address)"
  ): TypedContractEvent<
    Upgraded_address_Event.InputTuple,
    Upgraded_address_Event.OutputTuple,
    Upgraded_address_Event.OutputObject
  >;
  getEvent(
    key: "Upgraded(bytes)"
  ): TypedContractEvent<
    Upgraded_bytes_Event.InputTuple,
    Upgraded_bytes_Event.OutputTuple,
    Upgraded_bytes_Event.OutputObject
  >;

  filters: {
    "Constructed(bytes)": TypedContractEvent<
      ConstructedEvent.InputTuple,
      ConstructedEvent.OutputTuple,
      ConstructedEvent.OutputObject
    >;
    Constructed: TypedContractEvent<
      ConstructedEvent.InputTuple,
      ConstructedEvent.OutputTuple,
      ConstructedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      Upgraded_address_Event.InputTuple,
      Upgraded_address_Event.OutputTuple,
      Upgraded_address_Event.OutputObject
    >;
    "Upgraded(bytes)": TypedContractEvent<
      Upgraded_bytes_Event.InputTuple,
      Upgraded_bytes_Event.OutputTuple,
      Upgraded_bytes_Event.OutputObject
    >;
  };
}
